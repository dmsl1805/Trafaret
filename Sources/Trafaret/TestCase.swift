import Foundation

struct TestCase {
    enum Marker: String {
        case module
        case name
        case viewName
        case viewConfig
        case perceptualPrecision
        case scale

        var markerValue: String { "<-\(rawValue)->" }
    }
    
    private let template = """
    import XCTest
    import SnapshotTesting
    import SwiftUI
    import \(Marker.module.markerValue)

    /// Generated by `Trafaret` in `\(Marker.viewName.markerValue)`.
    /// Do not edit it directly, it may be overriden.
    /// If you want to disable test generation, just use `trafaret` function on your preview instead of `TrafaretSnapshotProvider`
    /// ```
    /// body
    ///     .trafaret(
    ///         on: previewContainer,
    ///         compareAs: compareConfig,
    ///         path: path
    ///     )
    /// ```
    @available(iOS 16.0, *)
    final class \(Marker.viewName.markerValue)SnapshotTest: XCTestCase {
        func test() {
            var config = \(Marker.viewConfig.markerValue)
            config.traits = .init()
    
            let viewController = UIHostingController(rootView: \(Marker.name.markerValue).body)
            viewController.view.frame = CGRect(origin: .zero, size: config.size ?? .zero)

            let message = verifySnapshot(
                matching: viewController,
                as: .image(on: config, perceptualPrecision: \(Marker.perceptualPrecision.markerValue), traits: UITraitCollection(displayScale: \(Marker.scale.markerValue))),
                originalFileName: "\(Marker.viewName.markerValue)",
                snapshotDirectory: \(Marker.name.markerValue).path.trafaretFileURL.deletingLastPathComponent().absoluteString
            )
    
            guard let message else { return }
            XCTFail(message)
        }
    }
    """
    
    let module: String
    let name: String
    let viewName: String
    let container: PreviewContainer
    let perceptualPrecision: Float
    let scale: CGFloat

    init(
        module: String,
        name: String,
        viewName: String,
        container: PreviewContainer,
        perceptualPrecision: Float,
        scale: CGFloat
    ) {
        self.module = module
        self.name = name
        self.viewName = viewName
        self.container = container
        self.perceptualPrecision = perceptualPrecision
        self.scale = scale
    }
    
    private var viewConfigValue: String {
        switch container {
        case .device(let device, _):
            return "ViewImageConfig.\(device.rawValue)"
        case .size(let size, _):
            return "ViewImageConfig(size: CGSize(width: \(size.width), height: \(size.height))"
        }
    }
    
    var body: String {
        template
            .replacingOccurrences(of: Marker.module.markerValue, with: module)
            .replacingOccurrences(of: Marker.name.markerValue, with: name)
            .replacingOccurrences(of: Marker.viewName.markerValue, with: viewName)
            .replacingOccurrences(of: Marker.viewConfig.markerValue, with: viewConfigValue)
            .replacingOccurrences(of: Marker.perceptualPrecision.markerValue, with: "\(perceptualPrecision)")
            .replacingOccurrences(of: Marker.scale.markerValue, with: "\(scale)")
    }
}
